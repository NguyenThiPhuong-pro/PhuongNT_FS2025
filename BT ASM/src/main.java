
// File: GarageManager.java
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

class GarageManager {
    // S·ª≠ d·ª•ng m·∫£ng ƒë·ªÉ qu·∫£n l√Ω
    private ArrayList<Vehicle> vehicleList = new ArrayList<>();
    private Scanner scanner = new Scanner(System.in);

    // Nh·∫≠p v√†o d·ªØ li·ªáu
    public void seedData() {
        vehicleList.add(new Car("Toyota", "Vios", 2021, 50000.0, "Black", 5));
        vehicleList.add(new Truck("Ford", "Ranger", 2020, 75000.0, "Red", 2.5));
        vehicleList.add(new Car("Honda", "City", 2022, 45000.0, "White", 5));
        System.out.println("‚úÖ ƒê√£ th√™m 3 xe m·∫´u v√†o danh s√°ch.");
    }


    // --- CH·ª®C NƒÇNG MENU ---

    // 1. Th√™m xe m·ªõi
    public void addVehicle() {
        System.out.println("\n--- TH√äM XE M·ªöI ---");
        System.out.print("Nh·∫≠p H√£ng xe (brand): ");
        String brand = scanner.nextLine();
        System.out.print("Nh·∫≠p D√≤ng xe (model): ");
        String model = scanner.nextLine();
        System.out.print("Nh·∫≠p NƒÉm s·∫£n xu·∫•t (year): ");
        int year = Integer.parseInt(scanner.nextLine());
        System.out.print("Nh·∫≠p Gi√° xe (price): ");
        double price = Double.parseDouble(scanner.nextLine());
        System.out.print("Nh·∫≠p M√†u xe (color): ");
        String color = scanner.nextLine();

        System.out.print("Ch·ªçn Lo·∫°i xe (1. Car / 2. Truck): ");
        String choice = scanner.nextLine();

        if (choice.equals("1")) {
            System.out.print("Nh·∫≠p S·ªë gh·∫ø (seatCount): ");
            int seatCount = Integer.parseInt(scanner.nextLine());
            vehicleList.add(new Car(brand, model, year, price, color, seatCount));
        } else if (choice.equals("2")) {
            System.out.print("Nh·∫≠p T·∫£i tr·ªçng (loadCapacity - t·∫•n): ");
            double loadCapacity = Double.parseDouble(scanner.nextLine());
            vehicleList.add(new Truck(brand, model, year, price, color, loadCapacity));
        } else {
            System.out.println("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Th√™m xe th·∫•t b·∫°i.");
            return;
        }

        System.out.println("‚úÖ Th√™m xe th√†nh c√¥ng. ID: " + Vehicle.getVehicleCount());
    }

    // 2. X√≥a xe theo ID
    public void removeVehicle() {
        System.out.println("\n--- X√ìA XE THEO ID ---");
        System.out.print("Nh·∫≠p ID xe c·∫ßn x√≥a: ");
        int idToRemove = Integer.parseInt(scanner.nextLine());

        // D√πng v√≤ng l·∫∑p for (ho·∫∑c for-each v·ªõi iterator) ƒë·ªÉ t√¨m v√† x√≥a
        boolean removed = false;
        for (int i = 0; i < vehicleList.size(); i++) {
            if (vehicleList.get(i).getId() == idToRemove) {
                vehicleList.remove(i);
                Vehicle.decreaseVehicleCount(); // Gi·∫£m bi·∫øn ƒë·∫øm static
                removed = true;
                System.out.println("‚úÖ Xe c√≥ ID " + idToRemove + " ƒë√£ ƒë∆∞·ª£c x√≥a.");
                break;
            }
        }

        if (!removed) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y xe v·ªõi ID " + idToRemove);
        }
    }

    // 3. Hi·ªÉn th·ªã danh s√°ch xe
    public void displayVehicles() {
        System.out.println("\n--- DANH S√ÅCH XE TRONG GARA ---");

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng xe (d√πng static)
        int count = Vehicle.getVehicleCount();
        System.out.println("üí° T·ªîNG S·ªê XE HI·ªÜN T·∫†I: " + count);

        if (count > 20) {
            System.out.println("üéâ Gara l·ªõn!");
        } else {
            System.out.println("üè° Gara nh·ªè.");
        }

        if (vehicleList.isEmpty()) {
            System.out.println("Danh s√°ch xe tr·ªëng.");
            return;
        }

        // Ti√™u ƒë·ªÅ
        System.out.println("===================================================================================================================================");
        System.out.printf("| %-4s | %-10s | %-10s | %-4s | %-12s | %-10s | %-10s | %-10s | %-12s |\n",
                "ID", "H√£ng", "D√≤ng", "NƒÉm", "Gi√° G·ªëc", "M√†u", "Lo·∫°i", "Th√¥ng tin Ri√™ng", "Gi√° Sau KM");
        System.out.println("===================================================================================================================================");

        // D√πng v√≤ng l·∫∑p for-each
        for (Vehicle vehicle : vehicleList) {
            System.out.println(vehicle); // G·ªçi toString()
        }
        System.out.println("===================================================================================================================================");
    }

    // 4. T√¨m ki·∫øm xe theo h√£ng
    public void searchByBrand() {
        System.out.println("\n--- T√åM KI·∫æM XE THEO H√ÉNG ---");
        System.out.print("Nh·∫≠p H√£ng xe c·∫ßn t√¨m: ");
        String searchBrand = scanner.nextLine().trim();

        ArrayList<Vehicle> results = new ArrayList<>();

        // D√πng v√≤ng l·∫∑p for
        for (int i = 0; i < vehicleList.size(); i++) {
            Vehicle v = vehicleList.get(i);
            // So s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            if (v.getBrand().equalsIgnoreCase(searchBrand)) {
                results.add(v);
            }
        }

        if (results.isEmpty()) {
            System.out.println("üîé Kh√¥ng t√¨m th·∫•y xe n√†o c·ªßa h√£ng " + searchBrand);
        } else {
            System.out.println("üîé K·∫øt qu·∫£ t√¨m ki·∫øm cho h√£ng " + searchBrand + " (" + results.size() + " xe):");
            // Ti√™u ƒë·ªÅ (c√≥ th·ªÉ t·∫°o m·ªôt h√†m in ti√™u ƒë·ªÅ chung)
            System.out.println("===================================================================================================================================");
            System.out.printf("| %-4s | %-10s | %-10s | %-4s | %-12s | %-10s | %-10s | %-10s | %-12s |\n",
                    "ID", "H√£ng", "D√≤ng", "NƒÉm", "Gi√° G·ªëc", "M√†u", "Lo·∫°i", "Th√¥ng tin Ri√™ng", "Gi√° Sau KM");
            System.out.println("===================================================================================================================================");

            // D√πng for-each ƒë·ªÉ in k·∫øt qu·∫£
            for (Vehicle v : results) {
                System.out.println(v);
            }
            System.out.println("===================================================================================================================================");
        }
    }

    // 5. S·∫Øp x·∫øp xe theo gi√° tƒÉng d·∫ßn
    public void sortByPriceAscending() {
        System.out.println("\n--- S·∫ÆP X·∫æP THEO GI√Å TƒÇNG D·∫¶N ---");

        Collections.sort(vehicleList, new Comparator<Vehicle>() {
            @Override
            public int compare(Vehicle v1, Vehicle v2) {
                // So s√°nh gi√° (tƒÉng d·∫ßn: v1.price - v2.price)
                return Double.compare(v1.getPrice(), v2.getPrice());
            }
        });

        System.out.println("‚úÖ Danh s√°ch ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn.");
        displayVehicles();
    }

    // 6. S·∫Øp x·∫øp xe theo nƒÉm s·∫£n xu·∫•t gi·∫£m d·∫ßn
    public void sortByYearDescending() {
        System.out.println("\n--- S·∫ÆP X·∫æP THEO NƒÇM S·∫¢N XU·∫§T GI·∫¢M D·∫¶N ---");

        Collections.sort(vehicleList, (v1, v2) -> {
            // So s√°nh nƒÉm (gi·∫£m d·∫ßn: v2.year - v1.year)
            return Integer.compare(v2.getYear(), v1.getYear());
        });

        System.out.println("‚úÖ Danh s√°ch ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo nƒÉm s·∫£n xu·∫•t gi·∫£m d·∫ßn.");
        displayVehicles();
    }

    // --- H√ÄM CH√çNH V√Ä MENU ---

    public void showMenu() {
        int choice;
        // D√πng v√≤ng l·∫∑p while ƒë·ªÉ duy tr√¨ ch∆∞∆°ng tr√¨nh
        while (true) {
            System.out.println("\n===== QU·∫¢N L√ù GARA XE =====");
            System.out.println("1. Th√™m xe m·ªõi");
            System.out.println("2. X√≥a xe theo ID");
            System.out.println("3. Hi·ªÉn th·ªã danh s√°ch xe");
            System.out.println("4. T√¨m ki·∫øm xe theo h√£ng");
            System.out.println("5. S·∫Øp x·∫øp xe theo gi√° tƒÉng d·∫ßn");
            System.out.println("6. S·∫Øp x·∫øp xe theo nƒÉm s·∫£n xu·∫•t gi·∫£m d·∫ßn");
            System.out.println("0. Tho√°t");
            System.out.println("===========================");
            System.out.print("üéØ Ch·ªçn ch·ª©c nƒÉng: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("‚ùå L·ªói: Vui l√≤ng nh·∫≠p s·ªë t·ª´ 0 ƒë·∫øn 6.");
                continue;
            }

            // S·ª≠ d·ª•ng switch-case ƒë·ªÉ x·ª≠ l√Ω menu
            switch (choice) {
                case 1:
                    addVehicle();
                    break;
                case 2:
                    removeVehicle();
                    break;
                case 3:
                    displayVehicles();
                    break;
                case 4:
                    searchByBrand();
                    break;
                case 5:
                    sortByPriceAscending();
                    break;
                case 6:
                    sortByYearDescending();
                    break;
                case 0:
                    System.out.println("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh. T·∫°m bi·ªát!");
                    return; // Tho√°t kh·ªèi h√†m showMenu, k·∫øt th√∫c ch∆∞∆°ng tr√¨nh
                default:
                    System.out.println("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.");
            }
        }
    }

    public static void main(String[] args) {
        GarageManager manager = new GarageManager();
        manager.seedData(); // Th√™m data m·∫´u ƒë·ªÉ ti·ªán test
        manager.showMenu();
    }
}